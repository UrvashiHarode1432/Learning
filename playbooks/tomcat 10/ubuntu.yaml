---
- name: install tomcat
  hosts: tomcat
  become: yes
  tasks:
    - name: check if the playbook is being executed on supported OS
      ansible.builtin.fail:
        msg: "This playbook is designed to word on ubuntu only"
      when: ansible_facts['distribution'] != "Ubuntu"
      tags:
        - check
    - name: install java
      ansible.builtin.package:
        name: "{{ java_package }}"
        update_cache: yes
        state: present
      tags:
        - java
        - prereq
    - name: create group
      ansible.builtin.group:
        name: "{{ group }}"
        state: present
      tags:
        - user
        - config
    - name: create user
      ansible.builtin.user:
        name: "{{ user }}"
        create_home: yes
        home: "{{ homedir }}"
        shell: "{{ shell }}"
        group: "{{ group }}"
      tags:
        - user
        - config
    - name: download tomcat
      ansible.builtin.get_url:
        url: "https://www-eu.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{tomcat_version}}.tar.gz"
      tags:
        - tomcat
        - config
    - name: find if the tomcat is already extracted
      ansible.builtin.stat:
        path: "{{ homedir }}/apache-tomcat-{{tomcat_version}}/LICENSE"
      register: license_info
      tags:
        - tomcat
        - config
    - name: extract tomcat
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-{{tomcat_version}}.tar.gz"
        dest: "{{ homedir }}"
        remote_src: yes
      when: not license_info.stat.exists
      tags:
        - tomcat
        - config
    - name: create symlink
      ansible.builtin.file:
        src: "{{ homedir }}/apache-tomcat-{{tomcat_version}}"
        dest: "{{ homedir }}/latest"
        state: link
      notify:
        - Recursively change ownership of a directory
        - add execute permission for shell script
      tags:
        - tomcat
        - config
    - name: Flush handlers
      meta: flush_handlers
      tags:
        - tomcat
        - config
    - name: copy service file
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
      notify:
          - reload daemon
      tags:
        - tomcat
        - config
    - name: ensure tomcat is enable and running
      ansible.builtin.systemd_service:
        name: "{{ user }}"
        state: started
      tags:
        - tomcat
        - config
    - name: configure the tomcat users xml
      ansible.builtin.template:
        src: tomcat-users.xml.j2
        dest: "{{ homedir }}/latest/conf/tomcat-users.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
      - restart tomcat
      tags:
        - tomcat
        - config
    - name: allow all for manager app
      ansible.builtin.template:
        src: context.xml.j2
        dest: "{{ homedir }}/latest/webapps/manager/META-INF/context.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
      - restart tomcat
      tags:
        - tomcat
        - config
    - name: allow all for hostmanager app
      ansible.builtin.template:
        src: context.xml.j2
        dest: "{{ homedir }}/latest/webapps/host-manager/META-INF/context.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
      - restart tomcat
      tags:
        - tomcat
        - config
  handlers:
    - name: reload daemon
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: Recursively change ownership of a directory
      ansible.builtin.file:
        path: "{{ homedir }}"
        state: directory
        recurse: yes
        owner: "{{ user }}"
        group: "{{ group }}"
    - name: add execute permission for shell script
      ansible.builtin.shell:
        cmd: "chmod +x {{ homedir }}/latest/bin/*.sh"
    - name: restart tomcat
      ansible.builtin.service:
        name: tomcat
        state: restarted